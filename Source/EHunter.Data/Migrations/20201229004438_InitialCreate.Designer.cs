// <auto-generated />
using System;
using EHunter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EHunter.Data.Migrations
{
    [DbContext(typeof(EHunterDbContext))]
    [Migration("20201229004438_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("EHunter.Data.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Galleries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Gallery");
                });

            modelBuilder.Entity("EHunter.Data.GalleryTag", b =>
                {
                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<string>("TagScopeName")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GalleryId", "TagScopeName", "TagName");

                    b.ToTable("GalleryTags");
                });

            modelBuilder.Entity("EHunter.Data.ImageEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("PostOrderId")
                        .HasColumnType("int");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("PostId", "PostOrderId")
                        .IsUnique()
                        .IsClustered();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EHunter.Data.ImageTag", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("TagScopeName")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ImageId", "TagScopeName", "TagName");

                    b.ToTable("ImageTags");
                });

            modelBuilder.Entity("EHunter.Data.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdditionalIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FavoritedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Identifier")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasColumnType("varchar(32)");

                    b.Property<DateTimeOffset>("PublishedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Provider", "Identifier")
                        .IsUnique()
                        .HasFilter("[Provider] IS NOT NULL AND [Identifier] IS NOT NULL");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("EHunter.Data.TagConvert", b =>
                {
                    b.Property<string>("TagScopeName")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConvertedTagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConvertedTagScopeName")
                        .HasColumnType("varchar(32)");

                    b.HasKey("TagScopeName", "TagName");

                    b.ToTable("TagConverts");
                });

            modelBuilder.Entity("EHunter.Data.TagImply", b =>
                {
                    b.Property<string>("TagScopeName")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImpliedTagScopeName")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ImpliedTagName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TagScopeName", "TagName", "ImpliedTagScopeName", "ImpliedTagName");

                    b.ToTable("TagImplies");
                });

            modelBuilder.Entity("EHunter.Data.PostGallery", b =>
                {
                    b.HasBaseType("EHunter.Data.Gallery");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("PostId")
                        .IsUnique()
                        .HasFilter("[PostId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("PostGallery");
                });

            modelBuilder.Entity("EHunter.Data.GalleryTag", b =>
                {
                    b.HasOne("EHunter.Data.Gallery", null)
                        .WithMany("Tags")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EHunter.Data.ImageEntry", b =>
                {
                    b.HasOne("EHunter.Data.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EHunter.Data.ImageTag", b =>
                {
                    b.HasOne("EHunter.Data.ImageEntry", null)
                        .WithMany("Tags")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EHunter.Data.PostGallery", b =>
                {
                    b.HasOne("EHunter.Data.Post", "Post")
                        .WithOne("Gallery")
                        .HasForeignKey("EHunter.Data.PostGallery", "PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EHunter.Data.Gallery", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("EHunter.Data.ImageEntry", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("EHunter.Data.Post", b =>
                {
                    b.Navigation("Gallery");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
